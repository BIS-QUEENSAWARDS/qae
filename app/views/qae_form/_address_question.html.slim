div role="group" id="q_#{question.key}" aria-labelledby="q_#{question.key}_label"
  - question.rendering_sub_fields.each do |sub_field_block|
    - sub_field_key = sub_field_block[0]
    - sub_field_title = sub_field_block[1]

    - case sub_field_key
    - when :building
      .question-group
        label for="q_#{question.key}_line_1"
          ' Building and
        label for="q_#{question.key}_line_2"
          ' street
        ul.errors-container
          - if @form_answer.validator_errors
            li = @form_answer.validator_errors[question.hash_key(suffix: "building")]
            li = @form_answer.validator_errors[question.hash_key(suffix: "street")]
        .clear

        input.large.js-trigger-autosave.required type="text" name=question.input_name(suffix: 'building') value=question.input_value(suffix: 'building') autocomplete="off"  id="q_#{question.key}_line_1" *possible_read_only_ops
        input.large.js-trigger-autosave type="text" name=question.input_name(suffix: 'street') value=question.input_value(suffix: 'street') autocomplete="off" id="q_#{question.key}_line_2" *possible_read_only_ops
    - when :country
      .question-group
        label
          ' Country
          = country_select(question.step.form.form_name, "#{question.key}_country", {priority_countries: ["GB", "US"], selected: question.input_value(suffix: 'country')}, possible_read_only_ops.merge({name: question.input_name(suffix: 'country'), class: 'js-trigger-autosave required'}))
          ul.errors-container
            - if @form_answer.validator_errors
              li = @form_answer.validator_errors[question.hash_key(suffix: sub_field_key)]
          .clear

    - when :county
      .question-group.question-required
        label id="#{question.key}_region_label" for="#{question.key}_county" aria-describedby="#{question.key}_county_hint"
          ' County
          ul.errors-container
            - if @form_answer.validator_errors
              li = @form_answer.validator_errors[question.hash_key(suffix: sub_field_key)]
          .clear

          - if question.county_context.present?
            .question-context[id="#{question.key}_county_hint"]
              == question.county_context

          = select_tag("#{question.key}_county", options_for_select(question.counties, question.input_value(suffix: "county")), possible_read_only_ops.merge({name: question.input_name(suffix: 'county'), class: "js-trigger-autosave required custom-select", include_blank: true}))

    - else
      .question-group
        label
          = sub_field_title
          ul.errors-container
            - if @form_answer.validator_errors
              li = @form_answer.validator_errors[question.hash_key(suffix: sub_field_key)]
          .clear

          - klass = "#{sub_field_title.parameterize == 'postcode' ? 'small' : 'medium'}"
          - klass <<(QAEFormBuilder::AddressQuestionValidator::NO_VALIDATION_SUB_FIELDS.exclude?(sub_field_key) ? " required" : " not-required")
          input.js-trigger-autosave class=klass type="text" name=question.input_name(suffix: sub_field_key) value=question.input_value(suffix: sub_field_key) autocomplete="off" *possible_read_only_ops

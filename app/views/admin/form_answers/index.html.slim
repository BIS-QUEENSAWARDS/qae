= simple_form_for @search, url: admin_form_answers_path, method: :get, as: :search, html: { class: 'search-form'} do |f|

  .row
    .col-md-3
      .form-group.search-input
        = f.input :query, label: false, input_html: { class: "form-control", placeholder: "Search...", type: "search" }
        = submit_tag :submit

  br

  .row
    .col-xs-12
      .table-overflow-container
        table.table.applications-table
          thead
            tr
              th &nbsp;
              th.sortable
                = sort_link f, "Company/Nominee", @search, :company_or_nominee_name, disabled: @search.query?
              th.sortable
                = sort_link f, "Reference", @search, :urn, disabled: @search.query?
              - if @search.query?
                th Award Type
              - else
                th.filter
                  = f.simple_fields_for [:filters, @search.filters] do |f|
                    = f.input :award_type, collection: award_types_collection, label: false, input_html: {multiple: true, class: 'if-js-hide'}
                  / TODO do category filter dropdown
                  .dropdown.if-no-js-hide
                    button.btn.btn-default.dropdown-toggle type="button" data-toggle="dropdown" aria-expanded="true"
                      ' Category:
                      span.text-filter
                        ' All
                      span.caret
                    ul.dropdown-menu role="menu"
                      li.checkbox role="presentation"
                        label data-value='select_all'
                          input type="checkbox"
                          span.label-contents
                            em Select all
                      li.divider
                      - award_types_collection.each do |key,v|
                        li.checkbox role="presentation"
                          label data-value=v
                            input type="checkbox"
                            span.label-contents
                              = FormAnswerDecorator::AWARD_TITLES[key]
              - if @search.query?
                th Status
              - else
                th.filter
                  = f.simple_fields_for [:filters, @search.filters] do |f|
                    = f.input :status, collection: FormAnswerStatusFiltering.collection, label: false, input_html: { multiple: true, class: 'if-js-hide'}
                  .dropdown.if-no-js-hide
                    button.btn.btn-default.dropdown-toggle type="button" data-toggle="dropdown" aria-expanded="true"
                      ' Status:
                      span.text-filter
                        ' All
                      span.caret
                    ul.dropdown-menu role="menu"
                      li.checkbox role="presentation"
                        label data-value='select_all'
                          input type="checkbox"
                          span.label-contents
                            em Select all
                      - FormAnswerStatusFiltering.collection.each do |state|
                        li.checkbox role='presentation'
                          label data-value=state[1]
                            input type='checkbox'
                            span.label-contents
                              = state[0]
                      li.divider
                      = f.simple_fields_for [:filters, @search.filters] do |f|
                        = f.input :status, collection: FormAnswerStatusFiltering.sub_collection, label: false, input_html: {multiple: true, class: 'if-js-hide'}
                      - FormAnswerStatusFiltering::SUB_OPTIONS.each do |key, val|
                        li.checkbox role="presentation"
                          label data-value=key
                            input type="checkbox"
                            span.label-contents
                              em = val[:label]
              th &nbsp;
              th.sortable
                = sort_link f, "Flag", @search, :flag, disabled: @search.query?
              th &nbsp;
          tbody
            - FormAnswerDecorator.decorate_collection(@form_answers).each do |obj|
              tr
                td.status-label class="#{obj.state_machine.categorized_state + '-label'}" alt="#{obj.state_machine.categorized_state.capitalize}" title="#{obj.state_machine.categorized_state.capitalize}"
                td.td-title
                  = link_to [:admin, obj], class: "ellipsis"
                    - unless obj.company_or_nominee_name.nil?
                      = link_to obj.company_or_nominee_name, [:admin, obj]
                    - else
                      = link_to [:admin, obj] do
                        em
                          ' Not found
                td
                  - if obj.urn.present?
                    = obj.urn
                  - else
                    span.urn-not-generated Not yet generated
                td = obj.award_type_short_name
                td = obj.progress_text
                td
                  - app_comments = application_comments(obj.comments)
                  - if app_comments.present?
                    = link_to [:admin, obj]
                      = app_comments
                td = application_flags(obj.comments)
                td = link_to "View", review_admin_form_answer_path(obj), target: "_blank", class: "icon-view"

  .row
    .col-xs-12.text-right
      = paginate @form_answers
      .clear

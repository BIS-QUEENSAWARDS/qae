.row
  .col-xs-12
    .table-overflow-container
      table.table.admin-table
        thead
          tr
            th.sortable
              = sort_link f, 'Name', @search, :full_name
            th.sortable
              = sort_link f, 'Email', @search, :email
            th.sortable
              = sort_link f, 'Company', @search, :company_name
            th.filter
              = f.simple_fields_for [:filters, @search.filters] do |f|
                = f.input :role, collection: User.role.options, label: false, input_html: {multiple: true, class: 'if-js-hide'}
              .dropdown.if-no-js-hide
                button.btn.btn-default.dropdown-toggle type="button" data-toggle="dropdown" aria-expanded="true"
                  ' Role:
                  span.text-filter
                    ' All
                  span.caret
                ul.dropdown-menu role="menu"
                  li.checkbox role="presentation"
                    label data-value="select_all"
                      input type="checkbox"
                      span.label-contents
                        em Select all
                  li.divider
                  - User.role.options.each do |role|
                    li.checkbox role="presentation"
                      label data-value=role[1]
                        input type="checkbox"
                        span.label-contents
                          = role[0]
            th.sortable
              = sort_link f, 'Signed in on', @search, :last_sign_in_at
            th.sortable
              = sort_link f, "Confirmed on", @search, :confirmed_at
        tbody
          - if UserDecorator.decorate_collection(resources).none?
            tr
              td.text-center colspan=100
                br
                p.p-empty No users found.
                br
          - else
            - UserDecorator.decorate_collection(resources).each do |user|
              tr
                td.td-title
                  = link_to user.full_name, edit_admin_user_path(user), class: 'link-edit-user ellipsis'
                td = mail_to user.email, user.email, {class: "ellipsis"}
                td = user.company
                td = user.role
                td
                  small.text-muted
                    span.visible-lg
                      = user.formatted_last_sign_in_at_long
                    span.hidden-lg
                      = user.formatted_last_sign_in_at_short
                td
                  - if user.confirmed_at.present?
                    small.text-muted
                      = l user.confirmed_at, format: :date_at_time
                  - else
                    small.text-danger
                      ' Not confirmed

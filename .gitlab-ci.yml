image:
  name: ruby:2.6.3

variables:
  DISPLAY_SOCIAL_MOBILITY_AWARD: "true"
  POSTGRES_DB: qae_test
  DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/$POSTGRES_DB"
  BUNDLER_VERSION: 2.0.1
  CHROMEDRIVER_VERSION: 75.0.3770.140
  CHROMEDRIVER_DIR: /chromedriver
  DOCKER_TLS_CERTDIR: ""

services:
  - name: redis:3.2.7
  - name: postgres:9.6-alpine
    alias: postgres

stages:
  - test
  - deploy

test:
  stage: test
  before_script:
    - apt-get update -qy
    - apt-get install -y postgresql postgresql-client
    - apt-get install -y nodejs
    - apt-get install -y libxss1 libappindicator1 libindicator7 fonts-liberation libappindicator3-1 libasound2 libatk-bridge2.0-0 libatspi2.0-0 libgtk-3-0 libnspr4 libnss3 libx11-xcb1 libxtst6 xdg-utils
    - wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
    - dpkg -i google-chrome*.deb
    - apt-get install -f
    - apt-get install -y xvfb unzip libcurl4 libcurl3-gnutls libcurl4-openssl-dev
    - mkdir $CHROMEDRIVER_DIR
    - wget -q --continue -P $CHROMEDRIVER_DIR "https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip"
    - unzip $CHROMEDRIVER_DIR/chromedriver* -d $CHROMEDRIVER_DIR
    - PATH=$CHROMEDRIVER_DIR:$PATH
    - chromedriver -v
    - gem install bundler
    - bundle install --path vendor/bundler --jobs=4 --retry=3
    - RAILS_ENV=test bundle exec rake db:create db:migrate
  script:
    - RAILS_ENV=test RAILS_DISABLE_TEST_LOG=true bundle exec rspec --tag '~skip_ci' --format RspecJunitFormatter --out rspec.xml --format progress
  artifacts:
    reports:
      junit: rspec.xml
  cache:
    key: gems-cache
    paths:
      - vendor/bundler

code_quality:
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - export DOCKER_HOST=tcp://localhost:2375
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
        --env SOURCE_CODE="$PWD"
        --volume "$PWD":/code
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/codequality:$SP_VERSION" /code
  artifacts:
    paths: [gl-code-quality-report.json]

deploy_dev:
  stage: deploy
  script:
    - curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
    - dpkg -i cf-cli_amd64.deb
    - cf -v
    - cf add-plugin-repo CF-Community https://plugins.cloudfoundry.org
    - cf install-plugin blue-green-deploy -r CF-Community -f
    - CF_ENDPOINT=api.london.cloud.service.gov.uk CF_SPACE=dev CF_APP=qae-dev ./bin/deploy
  environment:
    name: dev
    url: https://dev.queens-awards-enterprise.service.gov.uk/
  only:
    - master

deploy_staging:
  stage: deploy
  script:
    - curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
    - dpkg -i cf-cli_amd64.deb
    - cf -v
    - cf add-plugin-repo CF-Community https://plugins.cloudfoundry.org
    - cf install-plugin blue-green-deploy -r CF-Community -f
    - CF_ENDPOINT=api.london.cloud.service.gov.uk CF_SPACE=staging CF_APP=qae-staging ./bin/deploy
  environment:
    name: staging
    url: https://staging.queens-awards-enterprise.service.gov.uk/
  only:
    - staging

deploy_production:
  stage: deploy
  script:
    - curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
    - dpkg -i cf-cli_amd64.deb
    - cf -v
    - cf add-plugin-repo CF-Community https://plugins.cloudfoundry.org
    - cf install-plugin blue-green-deploy -r CF-Community -f
    - CF_ENDPOINT=api.london.cloud.service.gov.uk CF_SPACE=production CF_APP=qae-production ./bin/deploy
  environment:
    name: production
    url: https://www.queens-awards-enterprise.service.gov.uk/
  when: manual
  only:
  - production
